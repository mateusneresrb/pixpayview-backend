package dev.mateusneres.pixpayviewbackend.services;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import dev.mateusneres.pixpayviewbackend.dtos.request.PayerRequest;
import dev.mateusneres.pixpayviewbackend.dtos.request.PaymentRequest;
import dev.mateusneres.pixpayviewbackend.exceptions.PaymentTokenNotFoundException;
import dev.mateusneres.pixpayviewbackend.repositories.SettingsRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

@Service
@RequiredArgsConstructor
public class PaymentService {

    @Value("${payment.api.url}")
    private String API_URL;
    private final SettingsRepository settingsRepository;

    public String createQRCodePixPayment(String name, double price) {
        PaymentRequest paymentRequest = new PaymentRequest();
        paymentRequest.setDescription("Generated by " + name + " in PixPayView");
        paymentRequest.setPayment_method_id("pix");
        paymentRequest.setTransaction_amount(price);

        PayerRequest payerRequest = new PayerRequest();
        payerRequest.setEntity_type("individual");
        payerRequest.setType("customer");
        payerRequest.setEmail("auto@pixpayview.com");

        paymentRequest.setPayer(payerRequest);

        try {
            ObjectMapper mapper = new ObjectMapper();
            String jsonBody = mapper.writeValueAsString(paymentRequest);

            return sendRequestPayment(jsonBody);
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }
    }

    private String sendRequestPayment(String jsonBody) {
        String PAYMENT_TOKEN = settingsRepository.findFirstPaymentToken();

        if (PAYMENT_TOKEN == null) {
            throw new PaymentTokenNotFoundException(4001, "The payment token not exists!");
        }

        try {
            HttpClient client = HttpClient.newHttpClient();
            HttpRequest req = HttpRequest.newBuilder(URI.create(API_URL))
                    .header("Content-Type", "application/json")
                    .header("Authorization", "Bearer " + PAYMENT_TOKEN)
                    .POST(HttpRequest.BodyPublishers.ofString(jsonBody))
                    .build();

            HttpResponse<String> response = client.send(req, HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() != 201) {
                throw new PaymentTokenNotFoundException(7001, "The payment token was not authorized, please check that it is correct.");
            }

            ObjectMapper mapper = new ObjectMapper();
            JsonNode rootNode = mapper.readTree(response.body());
            JsonNode poiNode = rootNode.get("point_of_interaction");
            return poiNode.get("transaction_data").get("qr_code").asText();
        } catch (IOException | InterruptedException e) {
            throw new RuntimeException(e.getMessage());
        }
    }
}
